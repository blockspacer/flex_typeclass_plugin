[[~ // parameters begin

//using namespace cxtpl_utils;

//const auto headerGuard
//  = GetWithDefault<std::string>(cxtpl_params, "headerGuard", "");
//
//const auto generator_path
//  = GetWithDefault<std::string>(cxtpl_params, "generator_path", "");
//
//const auto fullBaseType
//  = GetWithDefault<std::string>(cxtpl_params, "fullBaseType", "");
//
//std::vector<std::string> generator_includes
//  = GetWithDefault<std::vector<std::string>>
//      (cxtpl_params, "generator_includes", std::vector<std::string>{});

// parameters end
/* no newline */ ~]][[~]]
// This is generated file. Do not modify directly.
// Path to the code generator: [[+ generator_path +]].

[[~]] for(const auto& fileName: generator_includes) {
[[+ fileName +]]
[[~]] } // end for

#include <iostream>
#include <cstring>
#include <type_traits>

namespace cxxctp {
namespace generated {

template <>
bool _tc_combined_t<
    [[+ fullBaseType +]]
  >::
  can_convert<
    [[+ fullBaseType +]]
  >() const
{
  return true;
}

// TODO
//{{GeneratedTypeclassName}}

} // namespace cxxctp
} // namespace generated
