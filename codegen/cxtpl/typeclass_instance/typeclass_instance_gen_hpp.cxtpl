[[~ // parameters begin

// parameters end
/* no newline */ ~]][[~]]
// This is generated file. Do not modify directly.
// Path to the code generator: [[+ generator_path +]].

[[+ startHeaderGuard(headerGuard) /* no newline */ +]][[~]]

[[~]] for(const auto& fileName: generator_includes) {
[[+ fileName +]]
[[~]] } // end for

#include <array>
#include <functional>
#include <memory>

namespace poly {
namespace generated {

[[~]] /**
[[~]] EXAMPLE:
[[~]]   template<>
[[~]]   void print< Printable, WaterSpell >
[[~]]     (const WaterSpell& data) noexcept ;
[[~]] **/
[[~]]  { // startscope
[[~]]    for(const auto& method: ReflectedBaseTypeclass->methods) {
[[~]]      const size_t methodParamsSize = method->params.size();
[[~]]      const bool needPrint = isTypeclassMethod(method);
[[~]]      if(needPrint) {
  template<>
[[~]]    const std::string methodSpecificators
[[~]]       = printMethodForwarding(
[[~]]           method
[[~]]           , kSeparatorWhitespace
[[~]]           // what method printer is allowed to print
[[~]]           , MethodPrinter::Forwarding::Options::FORWARDING_ALL
[[~]]             & ~MethodPrinter::Forwarding::Options::VIRTUAL);
[[+ methodSpecificators +]][[~]] /* no newline */
[[+ " " +]][[+ method->name +]][[~]] /* no newline */
[[~]]   // method is templated
  < Typeclass<[[+ BaseTypeclassName +]]>, [[+ ImplTypeclassName +]] >
[[~]]   // method has arguments
  (const [[+ ImplTypeclassName +]]& data[[~]] /* no newline */
[[~]] if(methodParamsSize) {
[[+   ", " +]][[~]] /* no newline */
[[+ expandMethodParameterDeclarations(method->params) +]][[~]] /* no newline */
[[~]] } // methodParamsSize
  ) [[~]] /* no newline */
[[+ method->isNoExcept ? "noexcept " : "" +]][[~]] /* no newline */
;
[[~ /* newline */ ~]]
[[~]]      } // needPrint
[[~]]    } // methods endfor
[[~]]  } // endscope

[[~]] // where `BaseTypeclassName` is trait like `Printable`
template<>
struct
  TypeclassImpl<
    [[+ ImplTypeclassName +]],
    [[+ BaseTypeclassName +]]
  >
  final
  : public TypeclassImplBase<[[+ BaseTypeclassName +]]>
{
  typedef [[+ ImplTypeclassName +]] type;

  TypeclassImpl(
    const [[+ ImplTypeclassName +]]& arg)
    : concreteData_(arg)
  {}

  TypeclassImpl(
    [[+ ImplTypeclassName +]]&& arg)
    : concreteData_(std::move(arg))
  {}

  // Construct the embedded concrete type from multiple arguments.
  template<typename... args_t>
  TypeclassImpl(args_t&&... args)
    : concreteData_(std::forward<args_t>(args)...)
  {}

  // Construct the embedded concrete type from multiple arguments.
  template<typename... args_t>
  TypeclassImpl(const args_t&... args)
    : concreteData_(std::forward<args_t>(args)...)
  {}

  std::unique_ptr<
      TypeclassImplBase<[[+ BaseTypeclassName +]]>>
  clone() const override final
  {
      // Copy-construct a new instance of TypeclassImpl on the heap.
      return std::make_unique<TypeclassImpl<
        [[+ ImplTypeclassName +]],
        [[+ BaseTypeclassName +]]
      >>(concreteData_);
  }

  std::unique_ptr<
      TypeclassImplBase<[[+ BaseTypeclassName +]]>>
  move_clone() override final
  {
      // Copy-construct a new instance of TypeclassImpl on the heap.
      return std::make_unique<TypeclassImpl<
        [[+ ImplTypeclassName +]],
        [[+ BaseTypeclassName +]]
      >>(std::move(concreteData_));
  }

[[~]] /**
[[~]] EXAMPLE:
[[~]] void __print() const noexcept override final
[[~]] {
[[~]]   return print< Printable >(concrete);
[[~]] }
[[~]] **/
[[~]]  { // startscope
[[~]]    for(const auto& method: ReflectedBaseTypeclass->methods) {
[[~]]      const size_t methodParamsSize = method->params.size();
[[~]]      const bool needPrint = isTypeclassMethod(method);
[[~]]      if(needPrint) {
[[~]]        if(method->isTemplate()) {
template< [[+ expandTemplateNames(method->tplParams) +]] >
[[~]]        } // method->isTemplate
[[~]]        const std::string methodSpecificators
[[~]]          = printMethodForwarding(
[[~]]              method
[[~]]              , kSeparatorWhitespace
[[~]]               // what method printer is allowed to print
[[~]]              , MethodPrinter::Forwarding::Options::FORWARDING_ALL
[[~]]                & ~MethodPrinter::Forwarding::Options::VIRTUAL);
[[+ methodSpecificators +]][[~]] /* no newline */
[[+ " __" +]][[~]] /* no newline */
[[+ method->name +]][[~]] /* no newline */
[[~]]   // method has arguments
  (
[[+ expandMethodParameterDeclarations(method->params) +]][[~]] /* no newline */
  ) [[~]] /* no newline */
[[~]]        const std::string methodTrailing
[[~]]           = printMethodTrailing(
[[~]]               method
[[~]]               , kSeparatorWhitespace
[[~]]               // what method printer is allowed to print
[[~]]               , MethodPrinter::Trailing::Options::TRAILING_NOTHING
[[~]]                 | MethodPrinter::Trailing::Options::CONST
[[~]]                 | MethodPrinter::Trailing::Options::NOEXCEPT);
[[+ methodTrailing +]][[~]] /* no newline */
override final
  {
[[~]] // call method
    return
      [[+ method->name +]][[~]] /* no newline */
[[~]]   // method is templated
        < Typeclass<[[+ BaseTypeclassName +]]> >[[~]] /* no newline */
[[~]]   // method has arguments
        ([[~]] /* no newline */
          concreteData_[[~]] /* no newline */
          [[+ methodParamsSize ? ", " : "" +]][[~]] /* no newline */
          [[+ expandMethodParameterNames(method->params) +]][[~]] /* no newline */
        );
  }
[[~ /* newline */ ~]]
[[~]]      } // needPrint
[[~]]    } // methods endfor
[[~]]  } // endscope

  // Our actual data
  // that can implement `BaseTypeclassName`
  // (where `BaseTypeclassName` is trait like `Printable`)
  [[+ ImplTypeclassName +]] concreteData_;
};

} // namespace poly
} // namespace generated

[[+ endHeaderGuard(headerGuard) /* no newline */ +]][[~]]
