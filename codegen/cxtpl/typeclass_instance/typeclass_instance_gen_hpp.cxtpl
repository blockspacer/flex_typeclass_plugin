[[~ // parameters begin

// parameters end
/* no newline */ ~]][[~]]
// This is generated file. Do not modify directly.
// Path to the code generator: [[+ generator_path +]].

[[+ clang_utils::startHeaderGuard(headerGuard) /* no newline */ +]][[~]]

[[~]] for(const auto& fileName: generator_includes) {
[[+ fileName +]]
[[~]] } // end for

#include <array>
#include <functional>
#include <memory>

namespace morph {
namespace generated {

[[~
/**
  EXAMPLE:
    template<>
    void print< Printable, WaterSpell >
      (const WaterSpell& data) noexcept ;
**/
{ // startscope
 for(const auto& method: ReflectedBaseTypeclass->methods) {
   const size_t methodParamsSize = method->params.size();
   const bool needPrint = isTypeclassMethod(method);
   if(!needPrint) {
     continue;
   }
   const std::string methodForwarding
      = clang_utils::printMethodForwarding(
          method
          , clang_utils::kSeparatorWhitespace
          // what method printer is allowed to print
          , MethodPrinter::Forwarding::Options::ALL
            & ~MethodPrinter::Forwarding::Options::VIRTUAL);
   const std::string methodTrailing
      = clang_utils::printMethodTrailing(
          method
          , clang_utils::kSeparatorWhitespace
          // what method printer is allowed to print
          , MethodPrinter::Trailing::Options::NOEXCEPT);
/* no newline */ ~]][[~]]
  template<>
[[+
  methodForwarding
  + " "
  + method->name
+]][[~]] /* no newline */
[[~]]   // method is templated
  < Typeclass<[[+ TypeclassBasesCode +]]>, [[+ ImplTypeclassName +]] >
[[~]]   // method has arguments
  (const [[+ ImplTypeclassName +]]& data[[~]] /* no newline */
[[+
  methodParamsSize
    ? (", " + methodParamDecls(method->params))
    : ""
+]][[~]] /* no newline */
  )
[[+
  methodTrailing
  + ";"
+]][[~]] /* no newline */
[[~ /* newline */ ~]]
[[~]]    } // methods endfor
[[~]]  } // endscope

// It is Model - class that stores data and implements Concept.
/// \note If we properly declare our types as final,
/// the compiler may be able to inline some of the virtual calls.
[[~]] // where `TypeclassBasesCode` is trait like `Printable`
template<>
struct
  TypeclassImpl<
    [[+ ImplTypeclassName +]],
    [[+ TypeclassBasesCode +]]
  >
[[~]] // mark generated class as final
[[~]] // note that final can improve performance
  final
  : public TypeclassImplBase<[[+ TypeclassBasesCode +]]>
{
  typedef [[+ ImplTypeclassName +]] type;

  TypeclassImpl(
    const [[+ ImplTypeclassName +]]& arg)
    : concreteData_(arg)
  {}

  TypeclassImpl(
    [[+ ImplTypeclassName +]]&& arg)
    : concreteData_(std::move(arg))
  {}

  // Construct the embedded concrete type from multiple arguments.
  template<typename... args_t>
  TypeclassImpl(args_t&&... args)
    : concreteData_(std::forward<args_t>(args)...)
  {}

  // Construct the embedded concrete type from multiple arguments.
  template<typename... args_t>
  TypeclassImpl(const args_t&... args)
    : concreteData_(std::forward<args_t>(args)...)
  {}

  std::unique_ptr<
    TypeclassImplBase<[[+ TypeclassBasesCode +]]>
  >
    clone_as_unique_ptr() const
[[~]] // mark all generated methods as override
    override
[[~]] // mark all generated methods as final
[[~]] // note that final can improve performance
    final
  {
      // Copy-construct a new instance of TypeclassImpl on the heap.
      return std::make_unique<TypeclassImpl<
        [[+ ImplTypeclassName +]],
        [[+ TypeclassBasesCode +]]
      >>(concreteData_);
  }

  std::unique_ptr<
    TypeclassImplBase<[[+ TypeclassBasesCode +]]>
  >
    move_clone_as_unique_ptr()
[[~]] // mark all generated methods as override
    override
[[~]] // mark all generated methods as final
[[~]] // note that final can improve performance
    final
  {
      // Copy-construct a new instance of TypeclassImpl on the heap.
      return std::make_unique<TypeclassImpl<
        [[+ ImplTypeclassName +]],
        [[+ TypeclassBasesCode +]]
      >>(std::move(concreteData_));
  }

[[~
/**
  EXAMPLE:
  void __print() const noexcept override final
  {
    return print< Printable >(concrete);
  }
**/
{ // startscope
 for(const auto& method: ReflectedBaseTypeclass->methods) {
   const size_t methodParamsSize = method->params.size();
   const bool needPrint = isTypeclassMethod(method);
   if(!needPrint) {
     continue;
   }
   const std::string methodForwarding
     = clang_utils::printMethodForwarding(
         method
         , clang_utils::kSeparatorWhitespace
          // what method printer is allowed to print
         , MethodPrinter::Forwarding::Options::ALL
           & ~MethodPrinter::Forwarding::Options::VIRTUAL);
   const std::string methodTrailing
      = clang_utils::printMethodTrailing(
          method
          , clang_utils::kSeparatorWhitespace
          // what method printer is allowed to print
          , MethodPrinter::Trailing::Options::NOTHING
            | MethodPrinter::Trailing::Options::CONST
            | MethodPrinter::Trailing::Options::NOEXCEPT);
/* no newline */ ~]][[~]]
[[~]]        if(method->isTemplate()) {
template< [[+ expandTemplateNames(method->tplParams) +]] >
[[~]]        } // method->isTemplate
[[+
  methodForwarding
  + " __"
  + method->name
  + "("
  + methodParamDecls(method->params)
  + ")"
  + " "
  + methodTrailing
  + "\n"
  // mark all generated methods as override
  + "override"
  + "\n"
  // mark all generated methods as final
  // note that final can improve performance
  + "final"
+]]
  {
[[~]] // call method
    return
      [[+ method->name +]]
[[~]]   // method is templated
        < Typeclass<[[+ TypeclassBasesCode +]]> >
[[~]]   // method has arguments
        (
          concreteData_
          [[+
            methodParamsSize
              ? (", "
                  + clang_utils::forwardMethodParamNames(
                      method->params))
              : ""
          +]]
        );
  }
[[~ /* newline */ ~]]
[[~]]    } // methods endfor
[[~]]  } // endscope

  // Our actual data
  // that can implement `TypeclassBasesCode`
  // (where `TypeclassBasesCode` is trait like `Printable`)
  [[+ ImplTypeclassName +]] concreteData_;
};

// It is Model - class that stores data and implements Concept.
/// \note version of typeclass that uses aligned storage
/// instead of unique_ptr
[[~]] // where `TypeclassBasesCode` is trait like `Printable`
template<>
struct
  InplaceTypeclassImpl<
    [[+ ImplTypeclassName +]],
    [[+ TypeclassBasesCode +]]
  >
[[~]] // mark generated class as final
[[~]] // note that final can improve performance
  final
  : public InplaceTypeclassImplBase<[[+ TypeclassBasesCode +]]>
{
  typedef [[+ ImplTypeclassName +]] type;

  InplaceTypeclassImpl(
    const [[+ ImplTypeclassName +]]& arg)
    : concreteData_(arg)
  {}

  InplaceTypeclassImpl(
    [[+ ImplTypeclassName +]]&& arg)
    : concreteData_(std::move(arg))
  {}

  // Construct the embedded concrete type from multiple arguments.
  template<typename... args_t>
  InplaceTypeclassImpl(args_t&&... args)
    : concreteData_(std::forward<args_t>(args)...)
  {}

  // Construct the embedded concrete type from multiple arguments.
  template<typename... args_t>
  InplaceTypeclassImpl(const args_t&... args)
    : concreteData_(std::forward<args_t>(args)...)
  {}

  InplaceTypeclassImplBase<[[+ TypeclassBasesCode +]]>*
    clone_as_raw_ptr(void* addr) const
[[~]] // mark all generated methods as override
    override
[[~]] // mark all generated methods as final
[[~]] // note that final can improve performance
    final
  {
      // Copy-construct a new instance of InplaceTypeclassImpl
      return new (addr)
        InplaceTypeclassImpl<
        [[+ ImplTypeclassName +]],
        [[+ TypeclassBasesCode +]]
      >
      (concreteData_);
  }

  InplaceTypeclassImplBase<[[+ TypeclassBasesCode +]]>*
    move_clone_as_raw_ptr(void* addr)
[[~]] // mark all generated methods as override
    override
[[~]] // mark all generated methods as final
[[~]] // note that final can improve performance
    final
  {
      // Copy-construct a new instance of InplaceTypeclassImpl
      return new (addr)
        InplaceTypeclassImpl<
        [[+ ImplTypeclassName +]],
        [[+ TypeclassBasesCode +]]
      >
      (std::move(concreteData_));
  }

[[~
/**
  EXAMPLE:
  void __print() const noexcept override final
  {
    return print< Printable >(concrete);
  }
**/
{ // startscope
 for(const auto& method: ReflectedBaseTypeclass->methods) {
   const size_t methodParamsSize = method->params.size();
   const bool needPrint = isTypeclassMethod(method);
   if(!needPrint) {
     continue;
   }
   const std::string methodForwarding
     = clang_utils::printMethodForwarding(
         method
         , clang_utils::kSeparatorWhitespace
          // what method printer is allowed to print
         , MethodPrinter::Forwarding::Options::ALL
           & ~MethodPrinter::Forwarding::Options::VIRTUAL);
   const std::string methodTrailing
      = clang_utils::printMethodTrailing(
          method
          , clang_utils::kSeparatorWhitespace
          // what method printer is allowed to print
          , MethodPrinter::Trailing::Options::NOTHING
            | MethodPrinter::Trailing::Options::CONST
            | MethodPrinter::Trailing::Options::NOEXCEPT);
/* no newline */ ~]][[~]]
[[~]]        if(method->isTemplate()) {
template< [[+ expandTemplateNames(method->tplParams) +]] >
[[~]]        } // method->isTemplate
[[+
  methodForwarding
  + " __"
  + method->name
  + "("
  + methodParamDecls(method->params)
  + ")"
  + methodTrailing
+]][[~]] /* no newline */
[[~]] // mark all generated methods as override
override
[[~]] // mark all generated methods as final
[[~]] // note that final can improve performance
final
  {
[[~]] // call method
    return
      [[+ method->name +]]
[[~]]   // method is templated
        < Typeclass<[[+ TypeclassBasesCode +]]> >
[[~]]   // method has arguments
        (
          concreteData_
          [[+
            methodParamsSize
              ? (", "
                  + clang_utils::forwardMethodParamNames(
                      method->params))
              : ""
          +]]
        );
  }
[[~ /* newline */ ~]]
[[~]]    } // methods endfor
[[~]]  } // endscope

  // Our actual data
  // that can implement `TypeclassBasesCode`
  // (where `TypeclassBasesCode` is trait like `Printable`)
  [[+ ImplTypeclassName +]] concreteData_;
};

} // namespace morph
} // namespace generated

[[+ clang_utils::endHeaderGuard(headerGuard) /* no newline */ +]][[~]]
