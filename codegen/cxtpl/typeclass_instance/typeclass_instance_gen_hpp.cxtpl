[[~ // parameters begin

//using namespace cxtpl_utils;
//
//const auto headerGuard
//  = GetWithDefault<std::string>(cxtpl_params, "headerGuard", "");
//
//const auto generator_path
//  = GetWithDefault<std::string>(cxtpl_params, "generator_path", "");
//
//std::vector<std::string> generator_includes
//  = GetWithDefault<std::vector<std::string>>
//      (cxtpl_params, "generator_includes", std::vector<std::string>{});
//
//reflection::ClassInfoPtr ReflectedBaseTypeclass
//  = GetWithDefault<reflection::ClassInfoPtr>
//      (cxtpl_params, "ReflectedBaseTypeclass", nullptr);
//
//std::string ImplTypeclassName
//  = GetWithDefault<std::string>
//      (cxtpl_params, "ImplTypeclassName", "");
//
//std::string BaseTypeclassName
//  = GetWithDefault<std::string>
//      (cxtpl_params, "BaseTypeclassName", "");

// parameters end
/* no newline */ ~]][[~]]
// This is generated file. Do not modify directly.
// Path to the code generator: [[+ generator_path +]].

[[+ startHeaderGuard(headerGuard) /* no newline */ +]][[~]]

[[~]] for(const auto& fileName: generator_includes) {
[[+ fileName +]]
[[~]] } // end for

#include <array>
#include <functional>
#include <memory>

namespace cxxctp {
namespace generated {

[[~]]  { // startscope
[[~]]    for(const auto& method: ReflectedBaseTypeclass->methods) {
[[~]]      const size_t methodParamsSize = method->params.size();
[[~]]      const bool needPrint = !method->isImplicit
[[~]]          && !method->isOperator
[[~]]          && !method->isCtor
[[~]]          && !method->isDtor;
[[~]]      if(needPrint) {
  template<>
[[+ method->isExplicitCtor ? "explicit " : "" +]][[~]] /* no newline */
[[+ method->isConstexpr ? "constexpr " : "" +]][[~]] /* no newline */
[[+ method->isStatic ? "static " : "" +]][[~]] /* no newline */
[[+ method->returnType->getPrintedName() +]][[~]] /* no newline */
[[+ " " +]][[~]] /* no newline */
[[+ method->name +]][[~]] /* no newline */
< [[+ BaseTypeclassName +]], [[+ ImplTypeclassName +]] >
(const [[+ ImplTypeclassName +]]& data[[~]] /* no newline */
[[~]] if(methodParamsSize) {
[[+   ", " +]][[~]] /* no newline */
[[+ paramsFullDecls(method->params) +]][[~]] /* no newline */
[[~]] } // methodParamsSize
) [[~]] /* no newline */
[[+ method->isNoExcept ? "noexcept " : "" +]][[~]] /* no newline */
;
[[~ /* newline */ ~]]
[[~]]      } // needPrint
[[~]]    } // methods endfor
[[~]]  } // endscope

/*template <>
[[+ ImplTypeclassName +]]& _tc_model_t<[[+ BaseTypeclassName +]]>::ref_concrete<[[+ ImplTypeclassName +]]>() noexcept;
*/

template<>
struct _tc_impl_t<
      [[+ ImplTypeclassName +]],
      [[+ BaseTypeclassName +]]
    >
    : public _tc_model_t<[[+ BaseTypeclassName +]]> {
    typedef [[+ ImplTypeclassName +]] val_type_t;

    // Construct the embedded concrete type.
    template<typename... args_t>
    _tc_impl_t(args_t&&... args) noexcept : concrete(std::forward<args_t>(args)...) { }

    explicit _tc_impl_t(const [[+ ImplTypeclassName +]]& concrete_arg) noexcept
      : concrete(concrete_arg) {}

[[~]]  { // startscope
[[~]]    for(const auto& method: ReflectedBaseTypeclass->methods) {
[[~]]      const size_t methodParamsSize = method->params.size();
[[~]]      const bool needPrint = !method->isImplicit
[[~]]          && !method->isOperator
[[~]]          && !method->isCtor
[[~]]          && !method->isDtor;
[[~]]      if(method->isTemplate()) {
template< [[+ templateParamsFullDecls(method->tplParams) +]] >
[[~]]      } // method->isTemplate
[[~]]      if(needPrint) {
[[+ method->isExplicitCtor ? "explicit " : "" +]][[~]] /* no newline */
[[+ method->isConstexpr ? "constexpr " : "" +]][[~]] /* no newline */
[[+ method->isStatic ? "static " : "" +]][[~]] /* no newline */
[[+ method->returnType->getPrintedName() +]][[~]] /* no newline */
[[+ " __" +]][[~]] /* no newline */
[[+ method->name +]][[~]] /* no newline */
(
[[+ paramsFullDecls(method->params) +]][[~]] /* no newline */
) [[~]] /* no newline */
[[+ method->isConst ? "const " : "" +]][[~]] /* no newline */
[[+ method->isNoExcept ? "noexcept " : "" +]][[~]] /* no newline */
override final
  {
    /// \note passes data, not ref
    return [[+ method->name +]][[~]] /* no newline */
< [[+ BaseTypeclassName +]] >[[~]] /* no newline */
([[~]] /* no newline */
concrete[[~]] /* no newline */
[[+ methodParamsSize ? ", " : "" +]][[~]] /* no newline */
[[+ paramsCallDecls(method->params) +]][[~]] /* no newline */
);
  }
[[~ /* newline */ ~]]
[[~]]      } // needPrint
[[~]]    } // methods endfor
[[~]]  } // endscope

    std::unique_ptr<
        _tc_model_t<[[+ BaseTypeclassName +]]>>
    clone() noexcept override final {
        // Copy-construct a new instance of _tc_impl_t on the heap.
        return std::make_unique<_tc_impl_t<
          [[+ ImplTypeclassName +]],
          [[+ BaseTypeclassName +]]
        >>(concrete);
    }

    std::unique_ptr<
        _tc_model_t<[[+ BaseTypeclassName +]]>>
    move_clone() noexcept override final {
        return std::make_unique<_tc_impl_t<
          [[+ ImplTypeclassName +]],
          [[+ BaseTypeclassName +]]
        >>(std::move(concrete));
    }

#if defined(ENABLE_TYPECLASS_GUID)
    std::string
      get_GUID() const noexcept override final
    {
      return "[[+ ImplTypeclassName +]], "
             "[[+ BaseTypeclassName +]]";
    }
#endif // ENABLE_TYPECLASS_GUID

    [[+ ImplTypeclassName +]]* operator->() {
        return &concrete;
    }

  // Our actual data.
  [[+ ImplTypeclassName +]] concrete;
};

/// \note same as above, but uses reference_wrapper
template<>
struct _tc_impl_t<
      std::reference_wrapper<[[+ ImplTypeclassName +]]>,
      [[+ BaseTypeclassName +]]
    >
    : public _tc_model_t<[[+ BaseTypeclassName +]]> {
    typedef std::reference_wrapper<[[+ ImplTypeclassName +]]> val_type_t;

    // Construct the embedded concrete type.
    template<typename... args_t>
    _tc_impl_t(args_t&&... args) noexcept
      : concrete(std::forward<args_t>(args)...)
    {}

    explicit _tc_impl_t(const std::reference_wrapper<[[+ ImplTypeclassName +]]>& concrete_arg) noexcept
      : concrete(concrete_arg) {}

[[~]]  { // startscope
[[~]]    for(const auto& method: ReflectedBaseTypeclass->methods) {
[[~]]      const size_t methodParamsSize = method->params.size();
[[~]]      const bool needPrint = !method->isImplicit
[[~]]          && !method->isOperator
[[~]]          && !method->isCtor
[[~]]          && !method->isDtor;
[[~]]      if(method->isTemplate()) {
template< [[+ templateParamsFullDecls(method->tplParams) +]] >
[[~]]      } // method->isTemplate
[[~]]      if(needPrint) {
[[+ method->isExplicitCtor ? "explicit " : "" +]][[~]] /* no newline */
[[+ method->isConstexpr ? "constexpr " : "" +]][[~]] /* no newline */
[[+ method->isStatic ? "static " : "" +]][[~]] /* no newline */
[[+ method->returnType->getPrintedName() +]][[~]] /* no newline */
[[+ " __" +]][[~]] /* no newline */
[[+ method->name +]][[~]] /* no newline */
(
[[+ paramsFullDecls(method->params) +]][[~]] /* no newline */
) [[~]] /* no newline */
[[+ method->isConst ? "const " : "" +]][[~]] /* no newline */
[[+ method->isNoExcept ? "noexcept " : "" +]][[~]] /* no newline */
override final
  {
    /// \note passes data, not ref
    return [[+ method->name +]][[~]] /* no newline */
< [[+ BaseTypeclassName +]] >[[~]] /* no newline */
([[~]] /* no newline */
concrete.get()[[~]] /* no newline */
[[+ methodParamsSize ? ", " : "" +]][[~]] /* no newline */
[[+ paramsCallDecls(method->params) +]][[~]] /* no newline */
);
  }
[[~ /* newline */ ~]]
[[~]]      } // needPrint
[[~]]    } // methods endfor
[[~]]  } // endscope

    std::unique_ptr<
        _tc_model_t<[[+ BaseTypeclassName +]]>>
    clone() noexcept override final {
        // Copy-construct a new instance of _tc_impl_t on the heap.
        return std::make_unique<_tc_impl_t<
            ///\note removed reference_wrapper
            [[+ ImplTypeclassName +]],
            [[+ BaseTypeclassName +]]
          >>(
          [[+ ImplTypeclassName +]] {
            concrete.get()
          }
        );
    }

    std::unique_ptr<
        _tc_model_t<[[+ BaseTypeclassName +]]>>
    move_clone() noexcept override final {
        return std::make_unique<_tc_impl_t<
          ///\note removed reference_wrapper
          [[+ ImplTypeclassName +]],
          [[+ BaseTypeclassName +]]
        >>(std::move(concrete.get()));
    }

#if defined(ENABLE_TYPECLASS_GUID)
    std::string
      get_GUID() const noexcept override final
    {
      return "[[+ ImplTypeclassName +]], "
             "[[+ BaseTypeclassName +]]";
    }
#endif // ENABLE_TYPECLASS_GUID

    [[+ ImplTypeclassName +]]* operator->() {
        return &concrete.get();
    }

  // Our actual data.
  std::reference_wrapper<[[+ ImplTypeclassName +]]> concrete;
};

} // namespace cxxctp
} // namespace generated

[[+ endHeaderGuard(headerGuard) /* no newline */ +]][[~]]
